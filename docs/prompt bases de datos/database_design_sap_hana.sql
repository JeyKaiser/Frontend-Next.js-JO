-- ====================================================================
-- DISEÑO DE BASE DE DATOS SAP HANA - TRAZABILIDAD DE PRENDAS
-- Sistema de Gestión de Producción con Trazabilidad Completa
-- Optimizado para capacidades columnares y analíticas de SAP HANA
-- ====================================================================

-- ====================================================================
-- 1. CONFIGURACIÓN DE ESQUEMA Y PARÁMETROS HANA
-- ====================================================================

-- Crear esquema principal
CREATE SCHEMA GARMENT_PRODUCTION_CONTROL;
SET SCHEMA GARMENT_PRODUCTION_CONTROL;

-- Configuración específica para SAP HANA
-- Habilitar compresión y optimizaciones columnares
ALTER SYSTEM ALTER CONFIGURATION ('indexserver.ini', 'SYSTEM') 
SET ('sql', 'plan_cache_size') = '2048' WITH RECONFIGURE;

-- ====================================================================
-- 2. TABLAS MAESTRAS - DISEÑO OPTIMIZADO PARA HANA
-- ====================================================================

--DROP TABLE T_COLECCIONES;
--DROP TABLE T_TRAZABILIDAD;
--DROP TABLE T_REFERENCIAS;
SELECT VERSION FROM M_DATABASE;
SELECT * FROM M_FEATURES WHERE FEATURE_NAME LIKE '%PARTITION%';

-- Tabla de Colecciones
-- Particionada por año para optimizar consultas temporales
CREATE COLUMN TABLE T_COLECCIONES (
    ID_COLECCION BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODIGO_COLECCION NVARCHAR(20) NOT NULL UNIQUE,
    NOMBRE_COLECCION NVARCHAR(100) NOT NULL,
    TEMPORADA NVARCHAR(20) NOT NULL,
    ANIO INTEGER NOT NULL,
    FECHA_INICIO DATE NOT NULL,
    FECHA_FIN DATE,
    ESTADO NVARCHAR(20) DEFAULT 'ACTIVA',
    OBSERVACIONES NVARCHAR(500),
    FECHA_CREACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USUARIO_CREACION NVARCHAR(50) NOT NULL,
    FECHA_MODIFICACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USUARIO_MODIFICACION NVARCHAR(50) NOT NULL
);


-- Crear índices
CREATE INDEX IDX_COLECCIONES_ANIO ON T_COLECCIONES (ANIO);
CREATE INDEX IDX_COLECCIONES_TEMPORADA ON T_COLECCIONES (TEMPORADA, ANIO);

-- Tabla de Fases del Proceso
-- Estructura maestra para definir las fases del flujo de trabajo
CREATE COLUMN TABLE T_FASES (
    ID_FASE                INTEGER         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODIGO_FASE            NVARCHAR(20)    NOT NULL UNIQUE,
    NOMBRE_FASE            NVARCHAR(100)   NOT NULL,
    DESCRIPCION            NVARCHAR(500),
    ETAPA                  NVARCHAR(50)    NOT NULL, -- 'MUESTRA_INICIAL', 'COSTEO', 'CONTRAMUESTRA'
    ORDEN_SECUENCIA        INTEGER         NOT NULL,
    AREA_RESPONSABLE       NVARCHAR(50)    NOT NULL,
    TIEMPO_ESTIMADO_HORAS  INTEGER         DEFAULT 24,
    TIEMPO_MAXIMO_HORAS    INTEGER         DEFAULT 72,
    ESTADO                 NVARCHAR(20)    DEFAULT 'ACTIVA',
    FECHA_CREACION         TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    USUARIO_CREACION       NVARCHAR(50)    NOT NULL
);

-- Índices para optimización
CREATE INDEX IDX_FASES_ETAPA_ORDEN ON T_FASES (ETAPA, ORDEN_SECUENCIA);
CREATE INDEX IDX_FASES_AREA ON T_FASES (AREA_RESPONSABLE);


-- Tabla de Usuarios/Áreas
CREATE COLUMN TABLE T_USUARIOS (
    ID_USUARIO             INTEGER         GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODIGO_USUARIO         NVARCHAR(20)    NOT NULL UNIQUE,
    NOMBRE_COMPLETO        NVARCHAR(100)   NOT NULL,
    EMAIL                  NVARCHAR(100),
    AREA                   NVARCHAR(50)    NOT NULL,
    ROL                    NVARCHAR(30)    NOT NULL,
    ESTADO                 NVARCHAR(20)    DEFAULT 'ACTIVO',
    FECHA_CREACION         TIMESTAMP       DEFAULT CURRENT_TIMESTAMP
);

CREATE INDEX IDX_USUARIOS_AREA ON T_USUARIOS (AREA);
CREATE INDEX IDX_USUARIOS_ROL ON T_USUARIOS (ROL);

-- ====================================================================
-- 3. TABLA PRINCIPAL DE REFERENCIAS - OPTIMIZADA PARA ALTO VOLUMEN
-- ====================================================================

-- Tabla de Referencias (Prendas)
-- Particionada por fecha de creación para optimizar consultas temporales
CREATE COLUMN TABLE T_REFERENCIAS (
    ID_REFERENCIA          BIGINT          GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODIGO_REFERENCIA      NVARCHAR(30)    NOT NULL UNIQUE,
    ID_COLECCION           BIGINT          NOT NULL,
    NOMBRE_REFERENCIA      NVARCHAR(150)   NOT NULL,
    TIPO_PRENDA            NVARCHAR(50)    NOT NULL,
    GENERO                 NVARCHAR(10)    NOT NULL,
    TALLA_BASE             NVARCHAR(10),
    COLOR_BASE             NVARCHAR(30),
    MATERIAL_PRINCIPAL     NVARCHAR(100),
    PRECIO_OBJETIVO        DECIMAL(10,2),
    ESTADO_GENERAL         NVARCHAR(30)    DEFAULT 'EN_PROCESO',
    FECHA_CREACION         TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    USUARIO_CREACION       NVARCHAR(50)    NOT NULL,
    FECHA_MODIFICACION     TIMESTAMP       DEFAULT CURRENT_TIMESTAMP,
    USUARIO_MODIFICACION   NVARCHAR(50)    NOT NULL
);

-- PASO 3: Agregar índices para compensar la falta de particionado
CREATE INDEX IDX_REFERENCIAS_COLECCION ON T_REFERENCIAS (ID_COLECCION, ESTADO_GENERAL);
CREATE INDEX IDX_REFERENCIAS_FECHA ON T_REFERENCIAS (FECHA_CREACION);
CREATE INDEX IDX_REFERENCIAS_TIPO ON T_REFERENCIAS (TIPO_PRENDA, GENERO);

ALTER TABLE T_REFERENCIAS ADD CONSTRAINT FK_REFERENCIAS_COLECCION 
FOREIGN KEY (ID_COLECCION) REFERENCES T_COLECCIONES(ID_COLECCION);

-- PASO 5: Ahora SÍ funcionará la clave foránea de T_TRAZABILIDAD
ALTER TABLE T_TRAZABILIDAD ADD CONSTRAINT FK_TRAZABILIDAD_REFERENCIA 
FOREIGN KEY (ID_REFERENCIA) REFERENCES T_REFERENCIAS(ID_REFERENCIA);


SELECT TABLE_NAME, COLUMN_NAME, POSITION, CONSTRAINT_TYPE 
FROM CONSTRAINTS 
WHERE TABLE_NAME = 'T_COLECCIONES' 
AND CONSTRAINT_TYPE = 'PRIMARY KEY';

===================================================================
-- 4. TABLA DE TRAZABILIDAD - CORAZÓN DEL SISTEMA
-- ====================================================================

-- Tabla de Movimientos/Trazabilidad
-- Versión ULTRA SIMPLE sin campos calculados inicialmente
CREATE COLUMN TABLE T_TRAZABILIDAD (
    ID_MOVIMIENTO BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ID_REFERENCIA BIGINT NOT NULL,
    ID_FASE INTEGER NOT NULL,
    TIPO_MOVIMIENTO NVARCHAR(20) NOT NULL,
    FECHA_MOVIMIENTO TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    ID_USUARIO_ORIGEN INTEGER,
    ID_USUARIO_DESTINO INTEGER,
    OBSERVACIONES NVARCHAR(1000),
    ARCHIVO_ADJUNTO NVARCHAR(500),
    ESTADO_CALIDAD NVARCHAR(20),
    TIEMPO_PERMANENCIA_HORAS DECIMAL(8,2),
    FECHA_REGISTRO TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USUARIO_REGISTRO NVARCHAR(50) NOT NULL,
    IP_REGISTRO NVARCHAR(45)
);

-- Esta NO funcionará porque T_TRAZABILIDAD no tiene FECHA_CREACION de la referencia
ALTER TABLE T_TRAZABILIDAD ADD CONSTRAINT FK_TRAZABILIDAD_REFERENCIA 
FOREIGN KEY (ID_REFERENCIA, ???) REFERENCES T_REFERENCIAS(ID_REFERENCIA, FECHA_CREACION); 

ALTER TABLE T_TRAZABILIDAD ADD CONSTRAINT FK_TRAZABILIDAD_FASE 
FOREIGN KEY (ID_FASE) REFERENCES T_FASES(ID_FASE);

ALTER TABLE T_TRAZABILIDAD ADD CONSTRAINT FK_TRAZABILIDAD_USUARIO_ORIGEN 
FOREIGN KEY (ID_USUARIO_ORIGEN) REFERENCES T_USUARIOS(ID_USUARIO);

ALTER TABLE T_TRAZABILIDAD ADD CONSTRAINT FK_TRAZABILIDAD_USUARIO_DESTINO 
FOREIGN KEY (ID_USUARIO_DESTINO) REFERENCES T_USUARIOS(ID_USUARIO);

-- Crear índices para optimización
CREATE INDEX IDX_TRAZABILIDAD_REF_FECHA ON T_TRAZABILIDAD (ID_REFERENCIA, FECHA_MOVIMIENTO);
CREATE INDEX IDX_TRAZABILIDAD_FASE_FECHA ON T_TRAZABILIDAD (ID_FASE, FECHA_MOVIMIENTO);
CREATE INDEX IDX_TRAZABILIDAD_TIPO_FECHA ON T_TRAZABILIDAD (TIPO_MOVIMIENTO, FECHA_MOVIMIENTO);
CREATE INDEX IDX_TRAZABILIDAD_USUARIO_FECHA ON T_TRAZABILIDAD (ID_USUARIO_DESTINO, FECHA_MOVIMIENTO);
CREATE INDEX IDX_TRAZABILIDAD_FECHA ON T_TRAZABILIDAD (FECHA_MOVIMIENTO);

-- Crear la vista con campos calculados para análisis
CREATE VIEW V_TRAZABILIDAD_ANALISIS AS
SELECT ID_MOVIMIENTO,
       ID_REFERENCIA,
       ID_FASE,
       TIPO_MOVIMIENTO,
       FECHA_MOVIMIENTO,
       ID_USUARIO_ORIGEN,
       ID_USUARIO_DESTINO,
       OBSERVACIONES,
       ARCHIVO_ADJUNTO,
       ESTADO_CALIDAD,
       TIEMPO_PERMANENCIA_HORAS,
       FECHA_REGISTRO,
       USUARIO_REGISTRO,
       IP_REGISTRO,
       YEAR(FECHA_MOVIMIENTO) AS ANIO_MOVIMIENTO,
       MONTH(FECHA_MOVIMIENTO) AS MES_MOVIMIENTO,
       WEEKDAY(FECHA_MOVIMIENTO) AS DIA_SEMANA,
       QUARTER(FECHA_MOVIMIENTO) AS TRIMESTRE,
       WEEK(FECHA_MOVIMIENTO) AS SEMANA_DEL_ANIO
FROM T_TRAZABILIDAD;



-- ====================================================================
-- 5. TABLA DE ESTADO ACTUAL - OPTIMIZACIÓN PARA CONSULTAS FRECUENTES
-- ====================================================================

-- Tabla de Estado Actual de Referencias
-- Desnormalizada para optimizar consultas de estado actual
CREATE COLUMN TABLE T_ESTADO_ACTUAL (
    ID_REFERENCIA BIGINT PRIMARY KEY,
    ID_FASE_ACTUAL INTEGER NOT NULL,
    FECHA_LLEGADA_FASE TIMESTAMP NOT NULL,
    ID_USUARIO_ACTUAL INTEGER,
    ESTADO_FASE NVARCHAR(20) DEFAULT 'EN_PROCESO',
    OBSERVACIONES_ACTUALES NVARCHAR(1000),
    ULTIMA_ACTUALIZACION TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- Agregar claves foráneas DESPUÉS
ALTER TABLE T_ESTADO_ACTUAL ADD CONSTRAINT FK_ESTADO_ACTUAL_REFERENCIA 
FOREIGN KEY (ID_REFERENCIA) REFERENCES T_REFERENCIAS(ID_REFERENCIA);

ALTER TABLE T_ESTADO_ACTUAL ADD CONSTRAINT FK_ESTADO_ACTUAL_FASE 
FOREIGN KEY (ID_FASE_ACTUAL) REFERENCES T_FASES(ID_FASE);

ALTER TABLE T_ESTADO_ACTUAL ADD CONSTRAINT FK_ESTADO_ACTUAL_USUARIO 
FOREIGN KEY (ID_USUARIO_ACTUAL) REFERENCES T_USUARIOS(ID_USUARIO);

-- Crear índices
CREATE INDEX IDX_ESTADO_FASE ON T_ESTADO_ACTUAL (ID_FASE_ACTUAL, ESTADO_FASE);
CREATE INDEX IDX_ESTADO_USUARIO ON T_ESTADO_ACTUAL (ID_USUARIO_ACTUAL);

-- Para DIAS_EN_FASE, crear una vista que lo calcule
CREATE VIEW V_ESTADO_ACTUAL_COMPLETO AS
SELECT ID_REFERENCIA,
       ID_FASE_ACTUAL,
       FECHA_LLEGADA_FASE,
       ID_USUARIO_ACTUAL,
       ESTADO_FASE,
       OBSERVACIONES_ACTUALES,
       ULTIMA_ACTUALIZACION,
       DAYS_BETWEEN(FECHA_LLEGADA_FASE, CURRENT_TIMESTAMP) AS DIAS_EN_FASE
FROM T_ESTADO_ACTUAL;


-- ====================================================================
-- 6. DATOS MAESTROS INICIALES
-- ====================================================================

-- Insertar fases del proceso (para insertalos toco uno por uno)
INSERT INTO T_FASES (
    CODIGO_FASE,
    NOMBRE_FASE,
    DESCRIPCION,
    ETAPA,
    ORDEN_SECUENCIA,
    AREA_RESPONSABLE,
    TIEMPO_ESTIMADO_HORAS,
    TIEMPO_MAXIMO_HORAS,
    ESTADO,
    USUARIO_CREACION
) VALUES
('JO', 'JO Creative', 'Recepcion inicial y asignacion de referencia', 'MUESTRA_DE_DISEÑO', 1, 'DISEÑO', 4, 8, 'ACTIVA', 'SYSTEM'),
('MD_CREACION_FICHA', 'MD Creacion Ficha', 'Creacion de ficha tecnica inicial', 'MUESTRA_DE_DISENO', 2, 'DISENO', 24, 48, 'ACTIVA', 'SYSTEM'),
('MD_CREATIVO', 'MD Creativo', 'Desarrollo creativo y conceptual', 'MUESTRA_DE_DISENO', 3, 'DISENO', 48, 96, 'ACTIVA', 'SYSTEM'),
('MD_CORTE', 'MD Corte', 'Especificaciones de corte', 'MUESTRA_DE_DISENO', 4, 'DISENO', 12, 24, 'ACTIVA', 'SYSTEM'),
('MD_FITTING', 'MD Fitting', 'Comentarios de Fitting', 'MUESTRA_DE_DISENO', 5, 'DISENO', 8, 16, 'ACTIVA', 'SYSTEM'),
('MD_TECNICO', 'MD Tecnico', 'Escalado tecnico y consumos', 'COSTEO', 6, 'TECNICO', 24, 48, 'ACTIVA', 'SYSTEM'),
('MD_TRAZADOR', 'MD Trazador', 'Verificacion de molderia y consumos', 'COSTEO', 7, 'PATRONAJE', 16, 32, 'ACTIVA', 'SYSTEM'),
('COSTEO', 'Costeo', 'Analisis de costos y pricing', 'COSTEO', 8, 'COSTEO', 8, 16, 'ACTIVA', 'SYSTEM'),
('PT_TECNICO', 'PT Tecnico', 'Revision tecnica final', 'PRODUCTO_TERMINADO', 9, 'TECNICO', 12, 24, 'ACTIVA', 'SYSTEM'),
('PT_CORTADOR', 'PT Cortador', 'Corte de contramuestra', 'PRODUCTO_TERMINADO', 10, 'PRODUCCION', 8, 16, 'ACTIVA', 'SYSTEM'),
('PT_FITTING', 'PT Fitting', 'Fitting final de contramuestra', 'PRODUCTO_TERMINADO', 11, 'CALIDAD', 6, 12, 'ACTIVA', 'SYSTEM'),
('PT_TRAZADOR', 'PT Trazador', 'Trazos finales y documentacion', 'PRODUCTO_TERMINADO', 12, 'PATRONAJE', 8, 16, 'ACTIVA', 'SYSTEM');

SELECT * FROM T_FASES;
SELECT COLUMN_NAME, DATA_TYPE_NAME, LENGTH FROM TABLE_COLUMNS WHERE TABLE_NAME = 'T_FASES' ORDER BY POSITION;

-- INSERTAR USUARIOS
INSERT INTO T_USUARIOS (CODIGO_USUARIO, NOMBRE_COMPLETO, EMAIL, AREA, ROL)
SELECT 'JO004', 'JO-Juan Carlos Perez', 'jc.perez@empresa.com', 'OPERACIONES', 'JEFE_OPERACIONES' FROM DUMMY UNION ALL 
SELECT 'MD005', 'JO-Maria Garcia Lopez', 'm.garcia@empresa.com', 'DISENO', 'DISENADOR_SENIOR' FROM DUMMY UNION ALL 
SELECT 'MD007', 'JO-Carlos Rodriguez', 'c.rodriguez@empresa.com', 'DISENO', 'DISENADOR' FROM DUMMY UNION ALL 
SELECT 'PR011', 'JO-Ana Martinez', 'a.martinez@empresa.com', 'PRODUCCION', 'CORTADOR_SENIOR' FROM DUMMY UNION ALL 
SELECT 'CA054', 'JO-Luis Hernandez', 'l.hernandez@empresa.com', 'CALIDAD', 'ESPECIALISTA_CALIDAD' FROM DUMMY UNION ALL 
SELECT 'TE041', 'JO-Patricia Lopez', 'p.lopez@empresa.com', 'TECNICO', 'INGENIERO_TEXTIL' FROM DUMMY UNION ALL 
SELECT 'PA076', 'JO-Roberto Silva', 'r.silva@empresa.com', 'PATRONAJE', 'PATRONISTA_SENIOR' FROM DUMMY UNION ALL 
SELECT 'CO046', 'JO-Sandra Morales', 's.morales@empresa.com', 'COMERCIAL', 'ANALISTA_COSTOS' FROM DUMMY;


SELECT * FROM  T_USUARIOS;
SELECT COLUMN_NAME, DATA_TYPE_NAME, LENGTH FROM TABLE_COLUMNS WHERE TABLE_NAME = 'T_USUARIOS' ORDER BY POSITION;
DELETE FROM T_USUARIOS;




